#include "aesp.h"

/**************************************************************
* Square (thus equal size) Matrix multiplication using 
* the pointers to the device stored data only
**************************************************************/

void interesctPropagate(cell *arr){
    // Compute the execution configuration assuming
    // the matrix dimensions are multiples of BLOCK_SIZE
    dim3 dimBlock(BLOCK_SIZE, BLOCK_SIZE);
    dim3 dimGrid(MAXSIZE / dimBlock.x, MAXSIZE / dimBlock.y);
    // Launch the device computation
    propagate<<<dimGrid, dimBlock>>>(cell *arr);
}

/**************************************************************
* Matrix multiplication from CUDA Manual
* Device function - only for Matrices that have size multiple of 
* Block_SIZE
* Device multiplication function called by Mul()
* Compute C = A * B
* wA is the width of A
* wB is the width of B
**************************************************************/


__global__ void propagate(cell *arr)
{
	/*
    // Block index
    int bx = blockIdx.x;
    int by = blockIdx.y;
    // Thread index
    int tx = threadIdx.x;
    int ty = threadIdx.y;
    // Index of the first sub-matrix of A processed by the block
    int aBegin = wA * BLOCK_SIZE * by;
    // Index of the last sub-matrix of A processed by the block
    int aEnd   = aBegin + wA - 1;
    // Step size used to iterate through the sub-matrices of A
    int aStep = BLOCK_SIZE;
    // Index of the first sub-matrix of B processed by the block
    int bBegin = BLOCK_SIZE * bx;
    // Step size used to iterate through the sub-matrices of B
    int bStep = BLOCK_SIZE * wB;
    // The element of the block sub-matrix that is computed
    // by the thread
    cuComplex Csub = make_cuFloatComplex(0, 0);
    // Loop over all the sub-matrices of A and B required to
    // compute the block sub-matrix
    for (int a = aBegin, b = bBegin;
             a <= aEnd;
             a += aStep, b += bStep) {
        // Shared memory for the sub-matrix of A
        __shared__ cuComplex As[BLOCK_SIZE][BLOCK_SIZE];
        // Shared memory for the sub-matrix of B
        __shared__ cuComplex Bs[BLOCK_SIZE][BLOCK_SIZE];
	// Load the matrices from global memory to shared memory;
	// each thread loads one element of each matrix
	As[ty][tx] = A[a + wA * ty + tx];
	Bs[ty][tx] = B[b + wB * ty + tx];
	// Synchronize to make sure the matrices are loaded
	__syncthreads();
	// Multiply the two matrices together;
	// each thread computes one element
	// of the block sub-matrix
	for (int k = 0; k < BLOCK_SIZE; ++k)
		Csub = cuCaddf(Csub, cuCmulf(As[ty][k], Bs[k][tx]));
	// Synchronize to make sure that the preceding
	// computation is done before loading two new
	// sub-matrices of A and B in the next iteration
	__syncthreads();
     }
  // Write the block sub-matrix to global memory;
  // each thread writes one element
  int c = wB * BLOCK_SIZE * by + BLOCK_SIZE * bx;
  C[c + wB * ty + tx] = Csub;
  */
}


/****************************************
 * Take the current position and the current direction and 
 * determine where the particle will intersect with the wall
 * of this cell
 * **************************************/
void determineIntersection(cell *c) {
	int i,j,k,l,r,q,x,y;
	double langle;
	double A,B,C;
	for (i = 0; i < MAXP; i++){
		if (c->pparticles[i] != NULL) {
			if (c->pparticles[i]->speed == 0){
				c->pparticles[i]->dir = ((double)rand()/(double)RAND_MAX)*360;
//			printf("%f  ",c->pparticles[i]->dir);
				A = tan(c->pparticles[i]->dir*PI/180.0);
				C = c->pparticles[i]->y-A*c->pparticles[i]->x;
			//printf("%f   %f\n",A,C);
//				s =V*ST;
				c->pparticles[i]->xf = (int)(cos(c->pparticles[i]->dir)*(double)S)+c->pparticles[i]->x;
				c->pparticles[i]->yf = (int)(sin(c->pparticles[i]->dir)*(double)S)+c->pparticles[i]->y;
//			printf("%i %i  %i %i\n",c->pparticles[i]->xf,c->pparticles[i]->yf, c->pparticles[i]->x,c->pparticles[i]->y);
				if (c->pparticles[i]->xf > c->x){
					c->pparticles[i]->xf = (c->pparticles[i]->x-c->x);
				} else if (c->pparticles[i]->xf< 0){
					c->pparticles[i]->xf = c->x-c->pparticles[i]->x;
				}// else {
				//	c->pparticles[i]->x = x;
				//	c->pparticles[i]->xf = x;
//					speed = 0;
				//}
				if (c->pparticles[i]->yf > c->y){
					c->pparticles[i]->yf = (c->pparticles[i]->yf-c->y);
				} else if (c->pparticles[i]->yf< 0){
					c->pparticles[i]->yf = c->y-c->pparticles[i]->yf;
				}// else {
				//	c->pparticles[i]->y = y;
				//	c->pparticles[i]->yf = y;
//					speed = 0;
				//}
			//	if (x == c->pparticles[i]->xf && y == c->pparticles[i]->yf){
			//		c->pparticles[i]->speed = 0;
			//	}
			//
			}
		}
	}
}

int init_cell(scell *c){

	c->x = CELLX;
	c->y = CELLY;

	return 0;
}

int init_pparticle(pparticle *p){
	p->x = rand()%CELLX;
	p->y = rand()%CELLY;
	p->speed = 0;

	return 0;
}

pparticle *  create_particle(){
	pparticle * p = (pparticle *)malloc(sizeof(pparticle));
	init_pparticle(p);
	return p;
}

int destroy_particle(pparticle *p){
	free(p);
	return 0;

}

int main(){
	int in, inn, val, m, n, result_row, result_column, lda, ldb, ldc, valuedness;
	int rand0, rand1;
	int zeros, ones, balanced, count, amount;
	cellarray *cuarr;
	pparticle * current;
	srand(time(NULL));	
	cellarray *arr = (cellarray *)malloc(sizeof(cellarray));;
	for (int a = 0; a < MAXSIZE;a++){
	        arr->array[a] = (scell *)malloc(sizeof(scell));;
		init_cell(arr->array[a]);
		arr->array[a]->headP = create_particle();
		current = arr->array[a]->headP->next;
		for (int b = 0; b < MAXP;b++){
			current = create_particle();
//	printf("done %i \n", arr->array[a]->pparticles[b]);
			current = current->next;
		}
	}

	cudaMalloc((void**)&cuarr, MAXSIZE*sizeof(cell));
	(cudaMemcpy(cuarr, arr, MAXSIZE*sizeof(cell), cudaMemcpyHostToDevice));
/*	for (int r = 0; r < 10;r++)
	//for (int b = 0; b < 10;b++)
	for (int a = 0; a < MAXSIZE;a++){
		for (int b = 0; b < MAXP;b++){
			determineIntersection(arr->array[a]);
			printf("Cell %i Particle %i is at x coordinate %i and y coordinate %i\n",a,b,arr->array[a]->pparticles[b]->xf,arr->array[a]->pparticles[b]->yf);
		}
	}
*/

return 0;
}
